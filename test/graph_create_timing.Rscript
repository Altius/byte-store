#!/usr/bin/env Rscript

suppressPackageStartupMessages(require(optparse))
option_list = list(
    make_option(c("-i", "--inFn"), action="store", default=NA, type='character', help="input filename"),
    make_option(c("-o", "--outFn"), action="store", default=NA, type='character', help="output filename"),
    make_option(c("-t", "--title"), action="store", default=NA, type='character', help="graph title"),
    make_option(c("-y", "--ylab"), action="store", default=NA, type='character', help="graph yaxis label")
    )
opt = parse_args(OptionParser(option_list=option_list))

if (is.na(opt$inFn) || is.na(opt$outFn) || is.na(opt$title) || is.na(opt$ylab)) {
    cat("Error: Please specify --inFn, --outFn, and --title parameters\n")
    q()
}

## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    library(plyr)

    # New version of length which can handle NA's: if na.rm==T, don't count them
    length2 <- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This does the summary. For each group's data frame, return a vector with
    # N, mean, and sd
    datac <- ddply(data, groupvars, .drop=.drop,
      .fun = function(xx, col) {
        c(N    = length2(xx[[col]], na.rm=na.rm),
          mean = mean   (xx[[col]], na.rm=na.rm),
          sd   = sd     (xx[[col]], na.rm=na.rm)
        )
      },
      measurevar
    )

    # Rename the "mean" column    
    datac <- rename(datac, c("mean" = measurevar))

    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci <- datac$se * ciMult

    return(datac)
}

input <- read.table(opt$inFn, col.names=c("type", "elements", "trial", "strategy", "filesize", "time"), colClasses=c("character", "numeric", "numeric", "factor", "numeric", "numeric"))
time_per_element <- input$time/input$elements
input <- cbind(input, time_per_element)

# cf. http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/#Helper functions
inputsum <- summarySE(input, measurevar="time_per_element", groupvars=c("type", "elements", "strategy"))

levels(inputsum$strategy)
inputsum$strategy_reordered = factor(inputsum$strategy,levels(inputsum$strategy)[c(2,3,1)])
levels(inputsum$strategy_reordered)

suppressPackageStartupMessages(require(ggplot2))
pdf(width=10, height=6, paste(opt$outFn, "pdf", sep="."))
pd <- position_dodge(0.01)
#ggplot(data=inputsum, aes(x=elements, y=time_per_element, group=type, colour=type)) + geom_errorbar(aes(ymin=time_per_element-ci, ymax=time_per_element+ci), position=pd, width=0.1) + geom_line(position=pd) + geom_point(position=pd, size=3) + scale_x_log10() + scale_color_brewer(palette="Set1") + ggtitle(opt$title) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + ylab(opt$ylab) + facet_grid(. ~ strategy_reordered)
ggplot(data=inputsum, aes(x=elements, y=time_per_element, group=type, colour=type)) + geom_errorbar(aes(ymin=time_per_element-ci, ymax=time_per_element+ci), position=pd, width=0.1) + geom_point(position=pd, size=3) + scale_x_log10() + scale_color_brewer(palette="Set1") + ggtitle(opt$title) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + stat_smooth() + ylab(opt$ylab) + facet_grid(. ~ strategy_reordered)
dev.off()